<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on I Love To Delete Code</title>
    <link>http://www.ilovetodeletecode.com/tags/golang/index.xml</link>
    <description>Recent content in Golang on I Love To Delete Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.ilovetodeletecode.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Running Apache Solr 6.5 on an Azure App Service instance</title>
      <link>http://www.ilovetodeletecode.com/post/2017/06/01/running-apache-solr-6.5-on-an-azure-app-service-instance/</link>
      <pubDate>Thu, 01 Jun 2017 22:35:15 +0100</pubDate>
      
      <guid>http://www.ilovetodeletecode.com/post/2017/06/01/running-apache-solr-6.5-on-an-azure-app-service-instance/</guid>
      <description>

&lt;p&gt;This post describes a daring way to attempt to deploy a single Solr node to an Azure App Service. I say daring because I could not find a copy paste solution on Stack Overflow. I saw some light at the end of the tunnel after reading the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service-web/web-sites-java-custom-upload&#34;&gt;Upload a custom Java web app to Azure&lt;/a&gt; article on Azure documentation which mentions Jetty and since Solr is running in a Jetty Servlet container by default I guessed I should at least give it a try.&lt;/p&gt;

&lt;h2 id=&#34;why-azure-app-services&#34;&gt;Why Azure App Services?&lt;/h2&gt;

&lt;p&gt;I have a small amount of data to index and I will never need more than one Solr node running, so why not. A pre-configured Linux VM would be an overkill. I haven&amp;rsquo;t tried Azure Search yet, but with Solr I can retrieve all the stats data for my filters and search results in a single request, not to mention its powerful natural language processing capabilities.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get to work&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;azure-portal-s-configuration-ui&#34;&gt;Azure Portal&amp;rsquo;s configuration UI&lt;/h2&gt;

&lt;p&gt;You only need to enable Java (at least version 1.8 for Solr &amp;gt; 6.x) and Jetty as a Web Container.&lt;/p&gt;


&lt;figure &gt;
    &lt;a href=&#34;http://www.ilovetodeletecode.com/img/Post5_azure_portal_configuration.png&#34;&gt;
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post5_azure_portal_configuration.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;web-config-httpplatform-configuration&#34;&gt;Web.config httpPlatform configuration&lt;/h2&gt;

&lt;p&gt;Extract contents of &lt;a href=&#34;http://www-eu.apache.org/dist/lucene/solr/6.5.1/&#34;&gt;solr-6.5.1.zip&lt;/a&gt; to &lt;b&gt;%HOME%\site\wwwroot&lt;/b&gt; folder of your App Service and add a Web.config with the following settings:&lt;/p&gt;


&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;configuration&gt;
  &lt;system.webServer&gt;    
    &lt;handlers&gt;
      &lt;add  name=&#34;httppPlatformHandler&#34; 
            path=&#34;*&#34; 
            verb=&#34;*&#34; 
            modules=&#34;httpPlatformHandler&#34; 
            resourceType=&#34;Unspecified&#34; /&gt;
    &lt;/handlers&gt;
    &lt;httpPlatform processPath=&#34;%HOME%\site\wwwroot\bin\solr.cmd&#34; 
        arguments=&#34;start -p %HTTP_PLATFORM_PORT%&#34;
        startupTimeLimit=&#34;20&#34;
        startupRetryCount=&#34;10&#34;
        stdoutLogEnabled=&#34;true&#34;&gt;
    &lt;/httpPlatform&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;


&lt;p&gt;&lt;code&gt;HTTP_PLATFORM_PORT&lt;/code&gt; is the environment variable that holds the port number Azure has dynamically assigned to the Java process. We use its value as a parameter to the &lt;b&gt;-p&lt;/b&gt; switch so that Solr does not start on the default port which is &lt;b&gt;8983&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Having &lt;code&gt;stdoutLogEnabled&lt;/code&gt; enabled causes the &lt;b&gt;stdout&lt;/b&gt; and &lt;b&gt;stderr&lt;/b&gt; for the process specified in the &lt;b&gt;processPath&lt;/b&gt; setting to be redirected to location defined in &lt;b&gt;stdoutLogFile&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The default value of &lt;b&gt;stdoutLogFile&lt;/b&gt; should be &lt;b&gt; %HOME%\LogFiles\ &lt;/b&gt; but in my case the logs were actually written to &lt;b&gt;%HOME%\site\wwwroot\ &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Although there seem to be some problems during the startup, Solr starts up successfully and you can access the Admin panel at &amp;lt;yoursite&amp;gt;.azurewebsites.net&lt;/p&gt;


Access is denied.
Waiting up to 30 to see Solr running on port 16055
INFO  - 2017-06-09 12:44:49.394; org.apache.http.impl.client.DefaultRequestDirector; I/O exception (java.net.SocketException) caught when connecting to {}-&gt;http://localhost:16055: Permission denied: connect
INFO  - 2017-06-09 12:44:49.521; org.apache.http.impl.client.DefaultRequestDirector; Retrying connect to {}-&gt;http://localhost:16055
INFO  - 2017-06-09 12:44:49.659; org.apache.http.impl.client.DefaultRequestDirector; I/O exception (java.net.SocketException) caught when connecting to {}-&gt;http://localhost:16055: Permission denied: connect
INFO  - 2017-06-09 12:44:49.659; org.apache.http.impl.client.DefaultRequestDirector; Retrying connect to {}-&gt;http://localhost:16055
Started Solr server on port 16055. Happy searching!


&lt;p&gt;That&amp;rsquo;s it! And oh yeah, don&amp;rsquo;t forget to enable Authentication (Azure App Service / Solr Authentication Plugins) or else everyone will have access to your Admin panel and Solr API.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>