<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I Love To Delete Code</title>
    <link>http://www.ilovetodeletecode.com/index.xml</link>
    <description>Recent content on I Love To Delete Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Jun 2017 22:35:15 +0100</lastBuildDate>
    <atom:link href="http://www.ilovetodeletecode.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Running Apache Solr 6.5 on an Azure App Service instance</title>
      <link>http://www.ilovetodeletecode.com/post/2017/06/01/running-apache-solr-6.5-on-an-azure-app-service-instance/</link>
      <pubDate>Thu, 01 Jun 2017 22:35:15 +0100</pubDate>
      
      <guid>http://www.ilovetodeletecode.com/post/2017/06/01/running-apache-solr-6.5-on-an-azure-app-service-instance/</guid>
      <description>

&lt;p&gt;This post describes a daring way to attempt to deploy a single Solr node to an Azure App Service. I say daring because I could not find a copy paste solution on Stack Overflow. I saw some light at the end of the tunnel after reading the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service-web/web-sites-java-custom-upload&#34;&gt;Upload a custom Java web app to Azure&lt;/a&gt; article on Azure documentation which mentions Jetty and since Solr is running in a Jetty Servlet container by default I guessed I should at least give it a try.&lt;/p&gt;

&lt;h2 id=&#34;why-azure-app-services&#34;&gt;Why Azure App Services?&lt;/h2&gt;

&lt;p&gt;I have a small amount of data to index and I will never need more than one Solr node running, so why not. A pre-configured Linux VM would be an overkill. I haven&amp;rsquo;t tried Azure Search yet, but with Solr I can retrieve all the stats data for my filters and search results in a single request, not to mention its powerful natural language processing capabilities.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get to work&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;azure-portal-s-configuration-ui&#34;&gt;Azure Portal&amp;rsquo;s configuration UI&lt;/h2&gt;

&lt;p&gt;You only need to enable Java (at least version 1.8 for Solr &amp;gt; 6.x) and Jetty as a Web Container.&lt;/p&gt;


&lt;figure &gt;
    &lt;a href=&#34;http://www.ilovetodeletecode.com/img/Post5_azure_portal_configuration.png&#34;&gt;
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post5_azure_portal_configuration.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;web-config-httpplatform-configuration&#34;&gt;Web.config httpPlatform configuration&lt;/h2&gt;

&lt;p&gt;Extract contents of &lt;a href=&#34;http://www-eu.apache.org/dist/lucene/solr/6.5.1/&#34;&gt;solr-6.5.1.zip&lt;/a&gt; to &lt;b&gt;%HOME%\site\wwwroot&lt;/b&gt; folder of your App Service and add a Web.config with the following settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #cd2828; font-weight: bold&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;    
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;handlers&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;add&lt;/span&gt;  &lt;span style=&#34;color: #bbbbbb&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;httppPlatformHandler&amp;quot;&lt;/span&gt; 
            &lt;span style=&#34;color: #bbbbbb&#34;&gt;path=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; 
            &lt;span style=&#34;color: #bbbbbb&#34;&gt;verb=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; 
            &lt;span style=&#34;color: #bbbbbb&#34;&gt;modules=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;httpPlatformHandler&amp;quot;&lt;/span&gt; 
            &lt;span style=&#34;color: #bbbbbb&#34;&gt;resourceType=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;Unspecified&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;/handlers&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;httpPlatform&lt;/span&gt; &lt;span style=&#34;color: #bbbbbb&#34;&gt;processPath=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;%HOME%\site\wwwroot\bin\solr.cmd&amp;quot;&lt;/span&gt; 
        &lt;span style=&#34;color: #bbbbbb&#34;&gt;arguments=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;start -p %HTTP_PLATFORM_PORT%&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #bbbbbb&#34;&gt;startupTimeLimit=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #bbbbbb&#34;&gt;startupRetryCount=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #bbbbbb&#34;&gt;stdoutLogEnabled=&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;/httpPlatform&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;HTTP_PLATFORM_PORT&lt;/code&gt; is the environment variable that holds the port number Azure has dynamically assigned to the Java process. We use its value as a parameter to the &lt;b&gt;-p&lt;/b&gt; switch so that Solr does not start on the default port which is &lt;b&gt;8983&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Having &lt;code&gt;stdoutLogEnabled&lt;/code&gt; enabled causes the &lt;b&gt;stdout&lt;/b&gt; and &lt;b&gt;stderr&lt;/b&gt; for the process specified in the &lt;b&gt;processPath&lt;/b&gt; setting to be redirected to location defined in &lt;b&gt;stdoutLogFile&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The default value of &lt;b&gt;stdoutLogFile&lt;/b&gt; should be &lt;b&gt; %HOME%\LogFiles\ &lt;/b&gt; but in my case the logs were actually written to &lt;b&gt;%HOME%\site\wwwroot\ &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Although there seem to be some problems during the startup, Solr starts up successfully and you can access the Admin panel at &amp;lt;yoursite&amp;gt;.azurewebsites.net&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;Access&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;denied.&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;Waiting&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;up&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;see&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Solr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;running&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;16055&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;INFO&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;09&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;49.394&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;org.apache.http.impl.client.DefaultRequestDirector;&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;O&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;exception&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(java.net.SocketException)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;caught&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;connecting&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{}-&amp;gt;http:&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//localhost:16055: Permission denied: connect&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;INFO&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;09&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;49.521&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;org.apache.http.impl.client.DefaultRequestDirector;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Retrying&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{}-&amp;gt;http:&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//localhost:16055&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;INFO&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;09&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;49.659&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;org.apache.http.impl.client.DefaultRequestDirector;&lt;/span&gt; &lt;span style=&#34;color: #40ffff&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #40ffff&#34;&gt;O&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;exception&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(java.net.SocketException)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;caught&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;connecting&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{}-&amp;gt;http:&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//localhost:16055: Permission denied: connect&lt;/span&gt;
&lt;span style=&#34;color: #40ffff&#34;&gt;INFO&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;09&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;49.659&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;org.apache.http.impl.client.DefaultRequestDirector;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Retrying&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;connect&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{}-&amp;gt;http:&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//localhost:16055&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;Started&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Solr&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;16055.&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Happy&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;searching!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! And oh yeah, don&amp;rsquo;t forget to enable Authentication (Azure App Service / Solr Authentication Plugins) or else everyone will have access to your Admin panel and Solr API.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://www.ilovetodeletecode.com/about/</link>
      <pubDate>Thu, 10 Mar 2016 11:10:55 +0000</pubDate>
      
      <guid>http://www.ilovetodeletecode.com/about/</guid>
      <description>

&lt;h2 id=&#34;about-me&#34;&gt;About me&lt;/h2&gt;

&lt;p&gt;My name is Jernej Gorički. I graduated from college in Faculty of Computer and Information Science, Ljubljana Slovenia. With background knowledge of C/C++ &amp;amp; Java my weapon of choice are .NET &amp;amp; C# . I worked as a freelancer with focus on desktop and web applications for exclusive customers in Automation and Test &amp;amp; Measurement Industry like &lt;a href=&#34;http://www.metrel.si/&#34;&gt;Metrel d.d.&lt;/a&gt;, &lt;a href=&#34;http://www.iskraimpuls.si/en/&#34;&gt;Iskra Impuls d.o.o.&lt;/a&gt; and &lt;a href=&#34;http://www.korona.si/en/&#34;&gt;Korona engineering d.d.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In 2015 I moved to London and started working in Legal Industry. At the moment I work for Mishcon de Reya LLP as a senior .NET developer.&lt;/p&gt;

&lt;h2 id=&#34;about-this-blog&#34;&gt;About this blog&lt;/h2&gt;

&lt;p&gt;For many artists the act of destroying their work played an important role in their career. Embarrassing early creations they would like to forget about, artistic rebirth and doubt in their work all left them remains (ideas) which they would gradually incorporate into new pieces.&lt;/p&gt;

&lt;p&gt;What do artists have in common with developers? Metaphors play a key role in constructing concepts and terminology especially in the world of Object Oriented Programming. They also give you insight into programming problems and processes. As the title of a &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&#34;&gt;fundamental monograph&lt;/a&gt; implies computer programming is an art hence developers are all artists.&lt;/p&gt;

&lt;p&gt;The name of this blog was inspired by one of my favorite &lt;a href=&#34;http://elegantcode.com/2010/06/06/the-best-code-you-will-ever-write/&#34;&gt;blog posts&lt;/a&gt; that deals with destroying your work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FileOptions Enumeration, Windows Cache Manager and Memory-Mapped Files (C#) Part 1</title>
      <link>http://www.ilovetodeletecode.com/post/2014/11/16/fileoptions-enumeration-windows-cache-manager-and-memory-mapped-files-csharp-part-1/</link>
      <pubDate>Sun, 16 Nov 2014 14:03:50 +0000</pubDate>
      
      <guid>http://www.ilovetodeletecode.com/post/2014/11/16/fileoptions-enumeration-windows-cache-manager-and-memory-mapped-files-csharp-part-1/</guid>
      <description>&lt;p&gt;Because working with files is such a common and potentially expensive operation, every operating system introduces numerous levels of indirection when serving I/O requests. This is necessary in order to execute I/O operations in a reasonable time frame. But managing complexity through abstraction of various hardware and software layers that interact during file operations also has its disadvantages: you get a false impression that you don&amp;rsquo;t need to know what is really going on under the hood :)&lt;/p&gt;

&lt;p&gt;I needed to optimize a part of my code that was writing data to random locations in a binary file. After realizing that &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.io.fileoptions(v=vs.110).aspx&#34;&gt;FileOptions.RandomAccess&lt;/a&gt; does not automagically do the trick and make seeks (in a loop!) run noticeably faster, I started to dig into the FileOptions Enumeration. A couple of days later, bursting with knowledge on internal working of Windows Cache Manager and speeding up random writes using &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd997372%28v=vs.110%29.aspx&#34;&gt;Memory-Mapped Files&lt;/a&gt; I decided to write a two part blog post about it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;fileoptions-enumeration-the-5-cache-flags&#34;&gt;FileOptions Enumeration &amp;amp; The 5 Cache Flags&lt;/h2&gt;

&lt;p&gt;The description for FileOptions.RandomAccess on MSDN is pretty vague:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;FileOptions.RandomAccess indicates that the file is accessed randomly. The system can use this as a hint to optimize file caching.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even a general search for FileOptions.RandomAccess keyword did not result in any resources that would describe the attribute in a more detailed manner. With a little help of &lt;a href=&#34;http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs,76ef6c04de9d0ed8&#34;&gt;.NET Reference Source&lt;/a&gt; you can quickly check that the FileOptions parameter you apply to FileStream&amp;rsquo;s constructor maps to next to last parameter (dwFlagsAndAttributes) of the native &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx&#34;&gt;CreateFile function&lt;/a&gt;. Lets check the flags from the native point of view.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.NET&lt;/th&gt;
&lt;th&gt;Native&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FileOptions.RandomAccess&lt;/td&gt;
&lt;td&gt;FILE_FLAG_RANDOM_ACCESS&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileOptions.SequentialScan&lt;/td&gt;
&lt;td&gt;FILE_FLAG_SEQUENTIAL_SCAN&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileOptions.WriteThrough&lt;/td&gt;
&lt;td&gt;FILE_FLAG_WRITE_THROUGH&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileOptions.NoBuffering&lt;/td&gt;
&lt;td&gt;FILE_FLAG_NO_BUFFERING&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileAttributes.Temporary&lt;/td&gt;
&lt;td&gt;FILE_ATTRIBUTE_TEMPORARY&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post4_cache_layers.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;These flags affect caching - not the FileStream&amp;rsquo;s internal buffer mechanism, but caching on the OS level (Cache Manager). The picture on your right (borrowed from this &lt;a href=&#34;http://research.microsoft.com/apps/pubs/default.aspx?id=64538&#34;&gt;research paper&lt;/a&gt;) clearly shows that caching is a two stage buffering process. Every time you are reading/writing in .NET you are actually copying bytes between the two buffers. With this in mind it is also easier to understand the &lt;a href=&#34;http://stackoverflow.com/questions/4921498/whats-the-difference-between-filestream-flush-and-filestream-flushtrue&#34;&gt;difference between Flush() and Flush(true)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;windows-cache-manager-file-flag-no-buffering&#34;&gt;Windows Cache Manager &amp;amp; FILE_FLAG_NO_BUFFERING&lt;/h2&gt;

&lt;p&gt;Each time you write or read data to/from disk drives the OS caches data unless FILE_FLAG_NO_BUFFERING is specified. In latter case your application has total control over the buffering process which is known as unbuffered file I/O. When inspecting .NET Reference Source 4.5.2 you can see that the FileOptions.NoBuffering enum is currently commented out. But the guard clause that validates FileOptions flags before calling native CreateFile function allows the value 0x20000000 and this value relates to the native flag FILE_FLAG_NO_BUFFERING. So the following initialization of FileStream would be legal:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;FileStream(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;c:\\file.txt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;FileMode.Open,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;FileAccess.Read,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;FileShare.None,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bufferSize,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;(FileOptions)&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;x20000000);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Files opened with FILE_FLAG_NO_BUFFERING do not go through the Cache Manager (all of the cache flags are ignored) and working with such files requires from our application to follow some rules regarding buffer alignment criteria. This is an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/cc644950(v=vs.85).aspx&#34;&gt;advanced topic&lt;/a&gt; and goes beyond this post. For each file that is accessed through the Cache Manager an array of internal data structures need to be created and managed. The bigger the file, the more resources it takes to successfully support caching. That is why it&amp;rsquo;s advised to use FILE_FLAG_NO_BUFFERING when working with very large files.&lt;/p&gt;

&lt;h2 id=&#34;cache-manager-routines&#34;&gt;Cache Manager Routines&lt;/h2&gt;

&lt;p&gt;Normally you would open files with Cache Manager enabled so let us look at its main routines that help us reduce I/O operations and enable our application to work faster:
1. Reading ahead
2. Lazy writing&lt;/p&gt;

&lt;h2 id=&#34;intelligent-read-ahead&#34;&gt;(Intelligent) Read Ahead&lt;/h2&gt;

&lt;p&gt;Cache Manager, keeps a history of the last two read request, for each file handle being used. With such history in mind it tries to determine the following patterns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User is doing sequential forward reads.&lt;/li&gt;
&lt;li&gt;User is doing sequential backward reads.&lt;/li&gt;
&lt;li&gt;User is doing reads in step sizes (offset 0 10 bytes, offset 1000 10 bytes, offset 2000 10 bytes&amp;hellip;.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If a pattern corresponds with history read requests then the Cache Manager can anticipate which bytes you are going to read next and that is a big performance improvement.&lt;/p&gt;

&lt;h3 id=&#34;how-do-cache-flags-affect-read-ahead&#34;&gt;How do cache flags affect Read Ahead?&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FileOptions.None&lt;/td&gt;
&lt;td&gt;General (previously described) pattern detection algorithm is used when no cache flags are applied.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileOptions.SequentialScan&lt;/td&gt;
&lt;td&gt;Cache manager does not try to determine any patterns. More aggressive read ahead is used - two times as much data is prefetched than normally (Do not use it when doing backward reads).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileOptions.RandomAccess&lt;/td&gt;
&lt;td&gt;If you are constantly doing seeks, you are wasting time and memory pre-emptively reading data that your application will probably not need. This option disables read-ahead.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;lazy-writing-write-back-cache&#34;&gt;Lazy Writing (Write Back Cache)&lt;/h2&gt;

&lt;p&gt;In order to flush as much data as possible to disk at once, write operations are piled up in memory until the decision is made by the Cache Manager. The decision about, which dirty pages should be flushed to disk and when, is made by the Cache Manager&amp;rsquo;s lazy writer function that executes on a separate system worker thread once per second.&lt;/p&gt;

&lt;h3 id=&#34;how-do-cache-flags-affect-lazy-writing&#34;&gt;How do cache flags affect Lazy Writing?&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FileAttributes.Temporary&lt;/td&gt;
&lt;td&gt;(Disable lazy writing) File system tries to keep the data in memory and flushes it only in case of memory shortage. This attribute is commonly combined withFileOptions.DeleteOnClose. Both of these flags combined are ideal for small temporary files since there will most likely be no hits to the hard disk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileOptions.WriteThrough&lt;/td&gt;
&lt;td&gt;Cache manager still caches data but only for file-read operations. Write changes are written to disk instantly. This is useful for reducing the risk for data loss. Warning! A lot of &lt;a href=&#34;http://blogs.msdn.com/b/oldnewthing/archive/2014/03/07/10505524.aspx&#34;&gt;resources&lt;/a&gt; are stating that all SATA drives ignore this flag.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;cache-usage-performance-counters&#34;&gt;Cache Usage Performance Counters&lt;/h2&gt;

&lt;p&gt;There are a lot of counters in the Cache section of Performance monitor that can help you evaluate cache usage. The two that relate to this blog post the most are Read Aheads/sec and Lazy Write Flushes/sec. The first one displays the rate at which the Cache Manager detects that a file is being accessed sequentially and the latter displays the rate of periodical flushes that are performed by the lazy writers thread. If you want to see all flushing activity use Data Flushes/sec counter.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When you step out of your comfortable .NET bubble, wonderful things can happen. I discovered way more information when learning about native flags that I did with FileOptions Enumeration. If you, like myself, never did any native C++ Windows programming, reading about internal mechanisms like Cache Manager and how to control it really helps you to better understand and optimise your managed .NET application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Keep your Mercurial revision history clutter free</title>
      <link>http://www.ilovetodeletecode.com/post/2014/05/19/keep-your-mercurial-revision-history-clutter-free/</link>
      <pubDate>Mon, 19 May 2014 16:10:04 +0000</pubDate>
      
      <guid>http://www.ilovetodeletecode.com/post/2014/05/19/keep-your-mercurial-revision-history-clutter-free/</guid>
      <description>&lt;p&gt;I have been using Mercurial revision control system as a weapon of choice for quite some time now. For controlling changes made to source code, as for backing up to a private repository hosted at Bitbucket I used the basic commands for committing, adding, pushing and pulling files to/from the local /remote repository on a daily basis. And that was sufficient for my needs&amp;hellip;.until recently. I stumbled upon an interesting blog post titled &lt;a href=&#34;http://elegantcode.com/2014/02/15/segregate-your-code-commits-into-tiny-topical-changes/comment-page-1/&#34;&gt;&amp;ldquo;Segregate your commits into tiny topical changes&amp;rdquo;&lt;/a&gt; that made me think of how my current revision history on a project looks like&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_history_example.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This kind of spaghetti history is very difficult to review. The commits are not topical and there is a lot of cognitive noise just because of backup commits. And I surely wouldn’t want to share code from revision 4 when I send my changes upstream and share them with other developers. It would be nice if you could change history a bit before you push the delivered feature to the public repository, so it would look something like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_better_history_example.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;how-to-make-changesets-mutable-in-mercurial&#34;&gt;How to make changesets mutable in Mercurial&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mercurial-scm.org/wiki/MqExtension&#34;&gt;Mercurial Queues&lt;/a&gt; is an extension that rewrites history. Using MQ we can remove, reorder or fold (merge) committed changesets. This functionality does not come out of the box, first we must configure the extension which is being distributed along with Mercurial. In order to enable the MQ Extension, we modify the local .hgrc file. We can do this directly or through TortoiseHG repository settings dialog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;modifying local .hgrc file
&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;[extensions]&lt;/span&gt;
&lt;span style=&#34;color: #06b6ef&#34;&gt;mq&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Check TortoiseHG-&amp;gt;Repository settings-&amp;gt;Extensions-&amp;gt;mq&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After the MQ Extension is enabled, Mercurial will include additional commands which we can print with hg help mq, but since this is a TortoiseHG tutorial, I will show you how to work with MQ through TortoiseHG Workbench.&lt;/p&gt;

&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;

&lt;p&gt;Using MQ Extensions we will modify our existing revision history, before we make it public. We will try to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete changeset 4 which was backed out.&lt;/li&gt;
&lt;li&gt;Reorder changesets so that refactoring changeset 5 comes after feature A is implemented.&lt;/li&gt;
&lt;li&gt;Split a changeset by file or by content using the Shelve tool. This is useful if one commit contains changes related to multiple topics. For example changeset 5 where we did some refactoring also contains logical changes that are part of the feature A implementation.&lt;/li&gt;
&lt;li&gt;Fold (merge) all changesets that represent topical commit feature A into one changeset.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since we will modify the revision history directly, we cannot rollback if something goes wrong so it’s better to have a cloned repository for the sake of backup before we start.&lt;/p&gt;

&lt;p&gt;To fully understand Mercurial Queues and the history behind patch management I also suggest reading &lt;a href=&#34;http://hgbook.red-bean.com/read/managing-change-with-mercurial-queues.html&#34;&gt;Chapter 12&lt;/a&gt; from the official Mercurial guide. But just the introduction without code samples, because they are not up to date.&lt;/p&gt;

&lt;p&gt;Long story short, patches deal with handling new code contributions from developers that do not have full commit access to a repository. This is useful on open source projects. But In this case we will use patches to prevent making permanent changes to our revision history and so making it more clutter free.&lt;/p&gt;

&lt;h2 id=&#34;treat-changesets-as-patches&#34;&gt;Treat changesets as patches&lt;/h2&gt;

&lt;p&gt;In order to manipulate changesets we must first add them to the Patch Queue. To view the Patch Queue window select &amp;ldquo;View-&amp;gt;Show Patch Queue&amp;rdquo; from TortoiseHG Workbench:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_WorkBench.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If MQ was properly enabled we should see a &amp;ldquo;Modify History&amp;rdquo; menu item in the context menu of the selected changeset.&lt;/p&gt;

&lt;h2 id=&#34;goal-1-delete-changeset-4&#34;&gt;Goal 1: Delete changeset 4&lt;/h2&gt;

&lt;p&gt;Select changeset 4 and import it to MQ. After a successful import you should see a new patch was added to the queue named &amp;ldquo;&lt;revision&gt;.diff&amp;rdquo;. This patch was pushed on top of the repository stack and corresponds to the selected changeset:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_delete_changeset.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The next step is to unapply the patch. We can do this from the Patch Queue or from the context menu Changeset 4 &amp;ldquo;Modify History-&amp;gt;Unapply patch&amp;rdquo;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_unapply_one_patch.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;When a patch is unapplied its corresponding commit is displayed at the top of the repository graph in a grayed out color:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_grayed_out_color.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Now we delete the patch and with this the changeset that corresponds to it:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_delete_patch.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;goal-2-reorder-changesets&#34;&gt;Goal 2: Reorder changesets&lt;/h2&gt;

&lt;p&gt;Let’s put refactoring changes in a changeset following the Feature A implementation changesets. Select changeset 1 and import it to MQ, then unapply all patches:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_goal2_reorder.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Use drag &amp;amp; drop to change the order of changesets. Carry changeset 4 to the end of the queue. You can do this in the Patch Queue window or in the main history view:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_drag_adn_drop.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;goal-3-split-a-changeset&#34;&gt;Goal 3: Split a changeset&lt;/h2&gt;

&lt;p&gt;Using the shelve tool TortoiseHg &amp;ldquo;Repository-&amp;gt;Shelve&amp;rdquo; we can move changes between unapplied patches. We can move all the changes made to a file or only chunks of changes inside a file. To move changes we select a target and destination patch in the left and right toolbar then we can use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The list view to select and move changes on a file basis.&lt;/li&gt;
&lt;li&gt;The text editor to select and move chunks of changes.&lt;/li&gt;
&lt;/ol&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_split.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;goal-4-fold-merge-changesets&#34;&gt;Goal 4: Fold (merge changesets)&lt;/h2&gt;

&lt;p&gt;Re-apply patch 1 then select patches 2, 3, 5, 6, 7 and click &amp;ldquo;Fold patches&amp;rdquo;. This will merge selected patches into the topmost applied patch 1:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_fold.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A commit dialog will appear, containing comments from all the folded patches separated by a three asterisk syntax. Edit patch message and commit changes:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_patch_fold.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Now Re-apply patch 4:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_reaply_patch4.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Turn the applied patches back to a regular Mercurial changeset with the &amp;ldquo;Finish Patch&amp;rdquo; command:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post3_finish_patch_command.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Our changesets are now ready to be pushed to a public repository and shared with the other collaborators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Refactoring a spaghetti C# serial communication app &amp; asynchronous control flow modeling with async/await</title>
      <link>http://www.ilovetodeletecode.com/post/2014/02/05/refactoring-a-spaghetti-c-serial-communication-app-asynchronous-control-flow-modeling-with-asyncawait/</link>
      <pubDate>Wed, 05 Feb 2014 11:08:28 +0000</pubDate>
      
      <guid>http://www.ilovetodeletecode.com/post/2014/02/05/refactoring-a-spaghetti-c-serial-communication-app-asynchronous-control-flow-modeling-with-asyncawait/</guid>
      <description>&lt;p&gt;A couple of months back I&amp;rsquo;ve got a task of implementing a protocol for an embedded device sending/receiving streams of data through serial communication. Together with this task I also inherited a Windows Forms C# application that already did some of the previous but in a different protocol with a different device. The more I struggled to understand and reuse some of the existing infrastructure, the more I wanted to rewrite the whole thing (sounds familiar?).&lt;/p&gt;

&lt;p&gt;Some facts about existing code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each scenario was implemented as a complex state machine with long switch statements.&lt;/li&gt;
&lt;li&gt;For each scenario a heavy weight enum with all possible states was defined.&lt;/li&gt;
&lt;li&gt;State machine transitions were implemented with a table of Action delegates paired with already mentioned enumerations in a key/value dictionary.&lt;/li&gt;
&lt;li&gt;Events were used to signal status of long running operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Such code was really hard to read and even harder to maintain. And if you don’t have the documentation for the device&amp;rsquo;s programming interface it&amp;rsquo;s all even harder.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;m trying to solve two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to design a more robust flexible issue/response system used for communicating with the serial device.&lt;/li&gt;
&lt;li&gt;How to model complex asynchronous control flows, without blocking, using Task Parallel Library and C# 5.0 async/await.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-the-state-pattern-to-get-rid-of-if-switch-statements&#34;&gt;Use the state pattern to get rid of if/switch statements&lt;/h2&gt;

&lt;p&gt;According to Gang of Four we should use the state pattern in either of the following cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An object&amp;rsquo;s behavior depends on its state, and it must change its behavior at run-time depending on that state.&lt;/li&gt;
&lt;li&gt;Operations have large, multipart conditional statements that depend on the object&amp;rsquo;s state. This state is usually represented by one or more enumerated constants. Often, several operations will contain this same conditional structure. The State pattern puts each branch of the conditional in a separate class. This lets you treat the object&amp;rsquo;s state as an object in its own right that can vary independently from other objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using state pattern we can make a more object oriented state machine so that each behavior specific to one state is encapsulated into a separate object. Such separation of state specific logic simplifies our code as it reduces the need for large conditional statements and makes it flexible so that it is easy to add new states in the future.&lt;/p&gt;

&lt;h4 id=&#34;players-in-the-state-pattern&#34;&gt;Players in the state pattern:&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Gang of Four&lt;/th&gt;
&lt;th&gt;Our example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Context&lt;/td&gt;
&lt;td&gt;EmbeddedDevice&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IState (defines an interface for encapsulating the behavior associated with a particular state of the Context)&lt;/td&gt;
&lt;td&gt;ICommand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;StateA : IState&lt;/td&gt;
&lt;td&gt;OpenFileCommand : ICommand&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;ICommand&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e7e9db&#34;&gt;IEnumerable&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;CommandInstruction&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #815ba4&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;Proccess&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(IEnumerable&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;data);&lt;/span&gt;
    &lt;span style=&#34;color: #fec418&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;IsFinished&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;collaborations&#34;&gt;Collaborations&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Context delegates state-specific requests to the current ConcreteState object.
EmbeddedDevice type delegates serial data to command that is currently being executed. Delegation is performed via state&amp;rsquo;s method Process (byte [] data) defined in ICommand.&lt;/li&gt;
&lt;li&gt;Context is the primary interface for clients. Clients can configure a context with State objects. Once a context is configured, its clients don&amp;rsquo;t have to deal with the State objects directly.
Clients issue new commands by adding it to the EmbeddedDevice command queue. Once the command is queued the client needs to wait to be signaled with the result.&lt;/li&gt;
&lt;li&gt;Either Context or the ConcreteState subclasses can decide which state succeeds another and under what circumstances.
EmbeddedDevice checks the state of the current command with the IsFinished property defined in ICommand. If necessary a transition is made simply by switching the CurrentCommand variable to the next command from command queue and signaling to the client that the command has finished executing. When the next command starts executing the first thing that EmbeddedDevice does is write to serial port bytes from the CommandInstruction property.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using such partitioning adds another nice side effect. States are modeled to commands this means that logic specific to each command is implemented in its own class. This way only by looking the file structure of the project you can get familiar right away with the internal working of the device you are communicating with. Inspecting each command object instantly gives you information about how the command has to be issued and how the response for each command looks like.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post2_structure.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;achieve-readable-asynchronous-control-flow&#34;&gt;Achieve readable asynchronous control flow&lt;/h2&gt;

&lt;p&gt;The best way to represent future I/O bound work that yet has not finished is through the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd460717(v=vs.110).aspx&#34;&gt;TPL (Task Parallel Library)&lt;/a&gt;. TPL is available since C# 4.0 and is replacing obsolete asynchronous patterns like &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms228963(v=vs.110).aspx&#34;&gt;APM (Asynchronous Programming Model - BeginMethod, EndMethod, and IAsyncResult)&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/wewwczdw(v=vs.110).aspx&#34;&gt;EAP (Event Based Asynchronous Pattern - signaling with events)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the heart of TPL are the Task type and its generic subclass Task&lt;TResult&gt;. Task represents an asynchronous operation that does some initialization, maybe spawns a new thread (or maybe not) and then immediately returns without blocking the calling thread. Tasks in our case (serial communication) are all I/O bound, so there is just a lot of waiting (no new threads need to be created).
The second most important class in TPL is TaskCompletionSource. It enables us to take any operation (that doesn&amp;rsquo;t yet follow TPL) and expose them as a Task. Exposing an asynchronous operation as a Task gives us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitor/callback mechanism.&lt;/li&gt;
&lt;li&gt;Easily retrieve a return value.&lt;/li&gt;
&lt;li&gt;Failure mechanism - exception propagation.&lt;/li&gt;
&lt;li&gt;Composition - ability to chain Tasks together.&lt;/li&gt;
&lt;li&gt;Separation of concerns - concurrency logic is not mixed with process logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets see how we wrap TaskCompletionSource around our external asynchronous operation. We add the command to the execution queue together with the corresponding TaskCompletionSource object. TaskCompletionSource exposes a Task object that is completely controlled by its parent. We return this Task to the caller. Providing a TaskCompletionSource for each command through the process of execution gives us a mechanism to signal back to the caller the state of the ongoing command execution (SetCanceled, SetException, SetResult). Returning a Task from the AddToExecutionQueue function enables the caller to monitor that state and utilize a continuation (callback) that executes after completion.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;TReturn&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;AddToExecutionQueue&amp;lt;TReturn&amp;gt;(TReturn&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;command)&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;tcs&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;TaskCompletionSource&amp;lt;TReturn&amp;gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #e7e9db&#34;&gt;_commandQueue.Enqueue(&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;CommandTaskPair(command,tsc));&lt;/span&gt;
    &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;tcs.Task;&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;structuring-asynchronous-flow-of-control&#34;&gt;Structuring asynchronous flow of control&lt;/h2&gt;

&lt;p&gt;Lets look at a more complex asynchronous workflow example. The process of downloading a file from the device is a nice example to start with. It consists of retrieving file information, reading error handling and then cleaning up the resources at the end. These are all long-running processes that together form a more complex asynchronous flow of control which we&amp;rsquo;ll try to model using 3 different approaches:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nesting continuations using lambda expressions.&lt;/li&gt;
&lt;li&gt;Writing separate functions.&lt;/li&gt;
&lt;li&gt;Using C# 5 language constructs async/await.&lt;/li&gt;
&lt;/ol&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post2_workflow.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;approach-1-nesting-continuations-using-lambda-expressions&#34;&gt;Approach 1: Nesting continuations using lambda expressions&lt;/h2&gt;

&lt;p&gt;Each next step needs to be invoked from the previously completed one. Such complex sequence of steps result in nested spaghetti continuations which are hard to follow and maintain. Next problem is that we are downloading file chunk by chunk so we need a looping construct, but looping constructs don&amp;rsquo;t go hand in hand with continuations. Because the next iteration should be triggered from the continuation itself we would have to use recursion. The only advantage with nested lambdas are closures which allow you to pass local state to the function without the need for parameters, but beware of closures if you don’t understand them fully, because funny things can happen :).&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Download()&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color: #815ba4&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;blockSize&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
 
            &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;tcs&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;TaskCompletionSource&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;();&lt;/span&gt;
 
            &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;openFileCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;OpenFileCmd(_fileInfo.Name,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;FileAccess.Read);&lt;/span&gt;
            &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;OpenFileCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(openFileCmd);&lt;/span&gt;
 
            &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask.ContinueWith(fileHandleFinished&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandle&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleFinished.Result.SuccessResult;&lt;/span&gt;
                &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;ReadBlockCmd(fileHandle,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;blockSize);&lt;/span&gt;
                &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;ReadBlockCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockTask&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(readBlockCmd);&lt;/span&gt;
 
                &lt;span style=&#34;color: #e7e9db&#34;&gt;Action&amp;lt;Task&amp;lt;ReadBlockCmd&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;recursiveDownload&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
 
                &lt;span style=&#34;color: #e7e9db&#34;&gt;recursiveDownload&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockFInished&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color: #fec418&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesRead&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockFInished.Result.SuccessResult.ActualData.ToArray();&lt;/span&gt;
                    &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesRead.Count();&lt;/span&gt;
                    &lt;span style=&#34;color: #e7e9db&#34;&gt;Proccess(bytesRead);&lt;/span&gt;
 
                    &lt;span style=&#34;color: #815ba4&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;(bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_fileInfo.Length)&lt;/span&gt;
                    &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;ReadBlockCmd(fileHandle,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;blockSize);&lt;/span&gt;
                        &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;ReadBlockCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;nextBlock&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(readBlockCmd);&lt;/span&gt;
                        &lt;span style=&#34;color: #e7e9db&#34;&gt;nextBlock.ContinueWith(recursiveDownload);&lt;/span&gt;
                    &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color: #815ba4&#34;&gt;else&lt;/span&gt;
                    &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;closeFileCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;CloseFileCmd(fileHandle);&lt;/span&gt;
                        &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;CloseFileCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;closeHandle&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(closeFileCmd);&lt;/span&gt;
                        &lt;span style=&#34;color: #e7e9db&#34;&gt;closeHandle.ContinueWith(closedHandle&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;tcs.SetResult(bytesTransfered));&lt;/span&gt;
                    &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #e7e9db&#34;&gt;};&lt;/span&gt;
                &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockTask.ContinueWith(recursiveDownload);&lt;/span&gt;
            &lt;span style=&#34;color: #e7e9db&#34;&gt;});&lt;/span&gt;
            &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;tcs.Task;&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;approach-2-writing-separate-functions&#34;&gt;Approach 2: Writing separate functions&lt;/h2&gt;

&lt;p&gt;Splitting callbacks into separate functions gives us a more readable control flow and also an easier way to achieve looping behavior. One drawback is that we have to pass parameters or use member variables in order to preserve context. Compared with lambda expressions, we are better off splitting functions but at the end of the day nothing can bring us a more natural control flow than approach 3.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   &lt;span style=&#34;color: #815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;DownloadFile&lt;/span&gt;
   &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color: #815ba4&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;EmbeddedDevice&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice;&lt;/span&gt;
           &lt;span style=&#34;color: #815ba4&#34;&gt;private&lt;/span&gt;  &lt;span style=&#34;color: #e7e9db&#34;&gt;DeviceFileInfo&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_fileInfo;&lt;/span&gt;
           &lt;span style=&#34;color: #815ba4&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;TaskCompletionSource&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_tcs;&lt;/span&gt;
           &lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_bytesTransfered;&lt;/span&gt;
           &lt;span style=&#34;color: #815ba4&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_fileHandle;&lt;/span&gt;
           &lt;span style=&#34;color: #815ba4&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;BlockSize&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
    
           &lt;span style=&#34;color: #815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;DownloadFile&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(EmbeddedDevice&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;embeddedDevice)&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;embeddedDevice;&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
    
    
           &lt;span style=&#34;color: #815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;Download&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(DeviceFileInfo&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileInfo)&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_tcs&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;TaskCompletionSource&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;();&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_fileInfo&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileInfo;&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_fileHandle&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
    
               &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;openFileCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;OpenFileCmd(_fileInfo.Name,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;FileAccess.Read);&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;OpenFileCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(openFileCmd);&lt;/span&gt;
    
               &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask.ContinueWith(OnFilehandleReceived);&lt;/span&gt;
    
               &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_tcs.Task;&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
    
           &lt;span style=&#34;color: #815ba4&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;OnFilehandleReceived&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(Task&amp;lt;OpenFileCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask)&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_fileHandle&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask.Result.SuccessResult;&lt;/span&gt;
               &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;ReadBlockCmd(_fileHandle,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;BlockSize);&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;ReadBlockCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;firstBlock&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(readBlockCmd);&lt;/span&gt;
    
               &lt;span style=&#34;color: #e7e9db&#34;&gt;firstBlock.ContinueWith(OnBlockReceived);&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
    
           &lt;span style=&#34;color: #815ba4&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;OnBlockReceived&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(Task&amp;lt;ReadBlockCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockTask)&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;IEnumerable&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockTask.Result.SuccessResult.ActualData;&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;ProccessData(data);&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;data.Count();&lt;/span&gt;
    
               &lt;span style=&#34;color: #815ba4&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;(_bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_fileInfo.Length)&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
                   &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;ReadBlockCmd(_fileHandle,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;BlockSize);&lt;/span&gt;
                   &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;ReadBlockCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;nextBlock&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(readBlockCmd);&lt;/span&gt;
                   &lt;span style=&#34;color: #e7e9db&#34;&gt;nextBlock.ContinueWith(OnBlockReceived);&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
               &lt;span style=&#34;color: #815ba4&#34;&gt;else&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
                   &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;closeFileCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;CloseFileCmd(_fileHandle);&lt;/span&gt;
                   &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;CloseFileCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;closeHandle&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(closeFileCmd);&lt;/span&gt;
    
                   &lt;span style=&#34;color: #e7e9db&#34;&gt;closeHandle.ContinueWith(OnResourcesCleaned);&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
    
           &lt;span style=&#34;color: #815ba4&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;OnResourcesCleaned&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(Task&amp;lt;CloseFileCmd&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;closedHandle)&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #e7e9db&#34;&gt;_tcs.SetResult(_bytesTransfered);&lt;/span&gt;
           &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;approach-3-using-c-5-0-language-constructs-async-await&#34;&gt;Approach 3: Using C# 5.0 language constructs async/await&lt;/h2&gt;

&lt;p&gt;Async/await enables us to program asynchronous workflows in a linear way, that is, we can write our program as we would synchronously but without tying up a thread. If a method, called with await, has not yet completed, the execution immediately returns to the caller. When the method completes, the execution jumps back to the method where it left of, preserving all local state. What compiler does under the covers when it stumbles upon an await operator is very similar to yield return in an iterator, that is, a lot of boiler plate code gets generated in order to achieve pause/resume functionality using state machines.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Task&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Download(DeviceFileInfo&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileInfo;)&lt;/span&gt;
  &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color: #fec418&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
              &lt;span style=&#34;color: #815ba4&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;blockSize&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;;&lt;/span&gt;
   
              &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;openFileCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;OpenFileCmd(fileInfo.Name,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;FileAccess.Read);&lt;/span&gt;
              &lt;span style=&#34;color: #e7e9db&#34;&gt;OpenFileCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(openFileCmd);&lt;/span&gt;
              &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandle&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileHandleTask.SuccessResult;&lt;/span&gt;
   
              &lt;span style=&#34;color: #815ba4&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;(bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;fileInfo.Length)&lt;/span&gt;
              &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
                  &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;ReadBlockCmd(fileHandle,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;blockSize);&lt;/span&gt;
                  &lt;span style=&#34;color: #e7e9db&#34;&gt;ReadBlockCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockTask&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(readBlockCmd);&lt;/span&gt;
                  &lt;span style=&#34;color: #fec418&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesRead&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;readBlockTask.SuccessResult.ActualData.ToArray();&lt;/span&gt;
                  &lt;span style=&#34;color: #e7e9db&#34;&gt;Proccess(bytesRead);&lt;/span&gt;
                  &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesTransfered&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesRead.Count();&lt;/span&gt;
              &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
   
              &lt;span style=&#34;color: #fec418&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;closeFileCmd&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;CloseFileCmd(fileHandle);&lt;/span&gt;
              &lt;span style=&#34;color: #815ba4&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;_embeddedDevice.AddToExecutionQueue(closeFileCmd);&lt;/span&gt;
              &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;bytesTransfered;&lt;/span&gt;
  &lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In summary, hiding callbacks with async/await language asynchrony support in C# 5.0 enables us to write code like we are used to and prevents complex asynchronous workflows (completion of multiple tasks, error handling…) from becoming unreadable and difficult to maintain. Even when targeting .NET 4 there is a &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Bcl.Async/1.0.16&#34;&gt;package&lt;/a&gt; on NuGet Microsoft.Bcl.Async which enables async/await keywords and includes the new Task based extension methods.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prevent large file commits with PowerShell and Mercurial hooks</title>
      <link>http://www.ilovetodeletecode.com/post/2013/10/31/prevent-large-file-commits-with-powershell-and-mercurial-hooks/</link>
      <pubDate>Thu, 31 Oct 2013 12:53:22 +0000</pubDate>
      
      <guid>http://www.ilovetodeletecode.com/post/2013/10/31/prevent-large-file-commits-with-powershell-and-mercurial-hooks/</guid>
      <description>&lt;p&gt;Because of Mercurial&amp;rsquo;s immutable historical record of project files there is no way to make a committed file completely disappear from the history tree. Our only hope in this case it&amp;rsquo;s not Obi-Wan but the hg rollback command if we act quickly. Since this command only works for one most recent operation &lt;a href=&#34;http://stackoverflow.com/questions/3288865/how-to-keep-a-mercurial-repository-small/&#34;&gt;(How to keep a Mercurial repository small?)&lt;/a&gt; it will not work if we already committed one or more changes after the change that we would like to completely remove &lt;a href=&#34;http://stackoverflow.com/questions/8466669/accidentally-committed-a-large-amount-of-raw-data-in-mercurial-how-do-i-keep-it&#34;&gt;(Accidentally committed a large amount of raw data in Mercurial, how do I keep it from overloading my Bitbucket repository?)&lt;/a&gt;. Our problems escalate even faster if we already pushed or pulled changes to a remote repository and our bad commit propagated to other collaborators.&lt;/p&gt;

&lt;p&gt;Two most common cases of brown paper bag commits &lt;a href=&#34;http://hgbook.red-bean.com/read/finding-and-fixing-mistakes.html#sec:undo:aaaiiieee&#34;&gt;(a commit that is so bad you want to pull a brown paper bag over your head)&lt;/a&gt; are accidentally committing sensitive information files (passwords, connection strings&amp;hellip;) and large files. The latter case is less critical because it only increase s repository size and the time it takes to perform operations like pull or clone.&lt;/p&gt;

&lt;p&gt;If you are interested in how to prevent yourself from committing large files and are more comfortable with PowerShell then please read on. If you are more of an indentation than squirrely brackets guy then you can check this similar solution in Python - &lt;a href=&#34;http://stackoverflow.com/questions/2551719/mercurial-hook-to-disallow-committing-large-binary-files&#34;&gt;Mercurial hook to disallow committing large binary files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;workflow&#34;&gt;Workflow&lt;/h2&gt;

&lt;p&gt;Our solution has a simple 3 step workflow&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On each commit retrieve files that have been added to the repo in current change set.&lt;/li&gt;
&lt;li&gt;Get the number of files that have size greater than maximum allowed size..&lt;/li&gt;
&lt;li&gt;Roll back or complete commit transaction based on the information from step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;controlling-repository-events-with-hooks&#34;&gt;Controlling repository events with hooks&lt;/h2&gt;

&lt;p&gt;Triggers that allow you to perform custom actions in response to events that occur on a Mercurial repository are called hooks. Because we need to execute a custom script every time a commit occurs there are two hooks that might interest us.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Commit - runs after a new changeset has been created in the local repository.&lt;/li&gt;
&lt;li&gt;Pretxncommit - runs after a new changeset has been created in the local repository, but before the transaction is completed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For obvious reasons we will go with pretxncommit. This hook will not only call our custom PowerShell script every time a commit, but it will also pass parameters in form of environmental variables to it. Each Hook parameter gets prefixed with &amp;ldquo;HG_”. We can list all parameters that are available from Mercurial context applying a filter to PowerShell &amp;ldquo;Env&amp;rdquo; drive&amp;rsquo;s content:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;dir&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;-path&lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;env:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color: #e7e9db&#34;&gt;Where-Object&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$_&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;.Name&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;-like&lt;/span&gt; &lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;HG_*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color: #e7e9db&#34;&gt;Select&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;-Property&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Name,Value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since pretxncommit is a controlling hook we can control the success of the operation using exit codes from our PowerShell script. Return a non-zero to roll back the transaction or 0 to complete it. We will exit our PowerShell script using the number of files greater than maximum size allowed.&lt;/p&gt;

&lt;h2 id=&#34;defining-the-pretxncommit-hook-as-an-external-program&#34;&gt;Defining the pretxncommit Hook as an external program&lt;/h2&gt;

&lt;p&gt;There are two ways in which a Hook gets executed. In our case the execution is &amp;ldquo;shell out&amp;rdquo; to another process. An alternative would be a Python function that is executed within the Mercurial process. In-process hooks are faster and have complete access to Mercurial API but you have to write code in Python.&lt;/p&gt;

&lt;p&gt;Hooks are defined in the [hooks] section of your local (hg\hgrc) or global (%USERPROFILE%\mercurial.ini) settings file. Each hook is defined in a type, name and action like format. You can edit settings file directly or use TortoiseHg settings dialog:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;[&lt;/span&gt;hooks&lt;span style=&#34;color: #5bc4bf&#34;&gt;]&lt;/span&gt; 
pretxncommit.fileSizeCheckHook &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; powershell.exe -File &lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;C:\Users\Jernej\Documents\WindowsPowerShell\pretxncommit.ps1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post1_Configure_Hook.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;pretxcommit-ps1&#34;&gt;pretxcommit.ps1&lt;/h4&gt;

&lt;script src=&#34;//gist.github.com/jernejg/7166587.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;As you can see I use a custom simple function called Get-HgAddedLargeFile to integrate Mercurial with PowerShell and to parse the output of hg status to PowerShell objects. You can also check out &lt;a href=&#34;https://github.com/JeremySkinner/posh-hg&#34;&gt;posh-hg&lt;/a&gt; from Jeremy Skinner that deals with Mercurial/PowerShell integration on a more advanced level.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post1_hook_output.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Because our hook runs in a separate process the detailed error information we printed to the console window in our previous case doesn&amp;rsquo;t get pulled to TortoiseHG log window instead just the default error is printed.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post1_commit_abort.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We can solve this by calling a message box from PowerShell that will provide additional information about problematic files and in addition to that provide us with a dialog where we can decide on further action &lt;a href=&#34;https://gist.github.com/jernejg/7196705&#34;&gt;pretxncommit_messagebox.ps1&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.ilovetodeletecode.com/img/Post1_message_box.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;hooks-do-not-propagate&#34;&gt;Hooks do not propagate&lt;/h2&gt;

&lt;p&gt;For the end let me remind you that hooks are not version controlled and do not propagate when you clone or pull from a repository. When collaborating with other people you can&amp;rsquo;t make them to use the same hooks as you.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>